#include <iostream>
#include <string>

const int kMaxClubs = 5;
const int kMaxMembers = 10;

// Estructura para representar a un miembro
struct Member {
    std::string first_name;
    std::string last_name;
    int age;
};

// Estructura para representar a un club con una cola de miembros
struct Club {
    std::string name;
    std::string creation_date;
    int max_capacity;
    Member* members[kMaxMembers];  // Cola de punteros a miembros
    int front;  // Índice del primer miembro en la cola
    int rear;   // Índice del último miembro en la cola
    int count;  // Número de miembros en la cola
};

// Función para inicializar un club
void InitializeClub(Club& club, const std::string& name, const std::string& date, int capacity) {
    club.name = name;
    club.creation_date = date;
    club.max_capacity = capacity;
    club.front = 0;
    club.rear = -1;
    club.count = 0;
}

// Función para crear un nuevo club
void CreateClub(Club clubs[], int& num_clubs, int max_clubs) {
    if (num_clubs >= max_clubs) {
        std::cout << "No se pueden crear más clubes.\n";
        return;
    }
    
    Club new_club;
    std::cout << "Ingrese el nombre del club: ";
    std::cin >> new_club.name;
    std::cout << "Ingrese la fecha de creación del club: ";
    std::cin >> new_club.creation_date;
    std::cout << "Ingrese la capacidad máxima del club: ";
    std::cin >> new_club.max_capacity;

    InitializeClub(new_club, new_club.name, new_club.creation_date, new_club.max_capacity);
    clubs[num_clubs++] = new_club;
    std::cout << "Club creado con éxito.\n";
}

// Función para listar todos los clubes
void ListClubs(const Club clubs[], int num_clubs) {
    if (num_clubs == 0) {
        std::cout << "No hay clubes registrados.\n";
        return;
    }
    
    for (int i = 0; i < num_clubs; i++) {
        std::cout << "Club " << i + 1 << ": " << clubs[i].name
                  << " (Fecha de creación: " << clubs[i].creation_date
                  << ", Capacidad: " << clubs[i].max_capacity << ")\n";
    }
}

// Función para registrar un miembro en un club (cola)
void RegisterMember(Club& club) {
    if (club.count >= club.max_capacity) {
        std::cout << "El club ha alcanzado su capacidad máxima.\n";
        return;
    }
    
    Member* new_member = new Member;
    std::cout << "Ingrese el nombre del miembro: ";
    std::cin >> new_member->first_name;
    std::cout << "Ingrese el apellido del miembro: ";
    std::cin >> new_member->last_name;
    std::cout << "Ingrese la edad del miembro: ";
    std::cin >> new_member->age;

    // Incrementar rear circularmente y agregar el nuevo miembro
    club.rear = (club.rear + 1) % kMaxMembers;
    club.members[club.rear] = new_member;
    club.count++;
    std::cout << "Miembro registrado exitosamente en el club (Cola).\n";
}

// Función para eliminar el miembro más antiguo registrado (operación dequeue de cola)
void RemoveOldestMember(Club& club) {
    if (club.count == 0) {
        std::cout << "No hay miembros en el club para eliminar.\n";
        return;
    }

    delete club.members[club.front];
    club.front = (club.front + 1) % kMaxMembers;
    club.count--;
    std::cout << "Miembro más antiguo eliminado de la cola.\n";
}

// Función para listar todos los miembros de un club
void ListMembers(const Club& club) {
    if (club.count == 0) {
        std::cout << "No hay miembros registrados en este club.\n";
        return;
    }

    std::cout << "Miembros del club " << club.name << ":\n";
    int index = club.front;
    for (int i = 0; i < club.count; i++) {
        std::cout << i + 1 << ". " << club.members[index]->first_name
                  << " " << club.members[index]->last_name
                  << ", Edad: " << club.members[index]->age << "\n";
        index = (index + 1) % kMaxMembers;
    }
}

// Función para contar el número de miembros de un club
void TotalMembers(const Club& club) {
    std::cout << "Número total de miembros en el club " << club.name << ": "
              << club.count << "\n";
}

int main() {
    Club clubs[kMaxClubs];
    int num_clubs = 0;
    int option;
    
    do {
        std::cout << "\nMenú de gestión de clubes:\n"
                  << "1. Crear un nuevo club\n"
                  << "2. Listar todos los clubes\n"
                  << "3. Registrar un miembro (Cola)\n"
                  << "4. Eliminar el miembro más antiguo registrado\n"
                  << "5. Listar miembros de un club\n"
                  << "6. Contar miembros de un club\n"
                  << "0. Salir\n"
                  << "Seleccione una opción: ";
        std::cin >> option;
        
        switch (option) {
            case 1:
                CreateClub(clubs, num_clubs, kMaxClubs);
                break;
            case 2:
                ListClubs(clubs, num_clubs);
                break;
            case 3: {
                int club_index;
                std::cout << "Seleccione el club (1-" << num_clubs << "): ";
                std::cin >> club_index;
                if (club_index >= 1 && club_index <= num_clubs) {
                    RegisterMember(clubs[club_index - 1]);
                } else {
                    std::cout << "Índice de club no válido.\n";
                }
                break;
            }
            case 4: {
                int club_index;
                std::cout << "Seleccione el club (1-" << num_clubs << "): ";
                std::cin >> club_index;
                if (club_index >= 1 && club_index <= num_clubs) {
                    RemoveOldestMember(clubs[club_index - 1]);
                } else {
                    std::cout << "Índice de club no válido.\n";
                }
                break;
            }
            case 5: {
                int club_index;
                std::cout << "Seleccione el club (1-" << num_clubs << "): ";
                std::cin >> club_index;
                if (club_index >= 1 && club_index <= num_clubs) {
                    ListMembers(clubs[club_index - 1]);
                } else {
                    std::cout << "Índice de club no válido.\n";
                }
                break;
            }
            case 6: {
                int club_index;
                std::cout << "Seleccione el club (1-" << num_clubs << "): ";
                std::cin >> club_index;
                if (club_index >= 1 && club_index <= num_clubs) {
                    TotalMembers(clubs[club_index - 1]);
                } else {
                    std::cout << "Índice de club no válido.\n";
                }
                break;
            }
            case 0:
                std::cout << "Saliendo del programa.\n";
                break;
            default:
                std::cout << "Opción no válida. Intente nuevamente.\n";
                break;
        }
    } while (option != 0);
    
    // Liberar memoria de miembros
    for (int i = 0; i < num_clubs; i++) {
        while (clubs[i].count > 0) {
            delete clubs[i].members[clubs[i].front];
            clubs[i].front = (clubs[i].front + 1) % kMaxMembers;
            clubs[i].count--;
        }
    }
    
    return 0;
}
